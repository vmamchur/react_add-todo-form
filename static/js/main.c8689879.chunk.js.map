{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","cn","completed","title","TodoList","todos","map","getUserById","userId","usersFromServer","find","todosWithUsers","App","useState","setTodos","newTodoTitle","setNewTodoTitle","selectedUserId","setSelectedUserId","hasTitleError","setHasTitleError","hasUserError","setHasUserError","getLargestTodoId","todoIds","Math","max","action","method","onSubmit","event","preventDefault","newTodo","trim","currentTodos","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c8689879.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../react-app-env';\n\ninterface Props {\n  user: User | null;\n}\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user?.email}`}>\n      {user?.name}\n    </a>\n  );\n};\n","import cn from 'classnames';\n\nimport { TodoWithUser } from '../../react-app-env';\n\nimport { UserInfo } from '../UserInfo';\n\ninterface Props {\n  todo: TodoWithUser;\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      key={todo.id}\n      data-id={todo.id}\n      className={cn(\n        'TodoInfo',\n        { 'TodoInfo--completed': todo.completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      <UserInfo user={todo.user} />\n    </article>\n  );\n};\n","import { TodoWithUser } from '../../react-app-env';\n\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: TodoWithUser[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo\n          todo={todo}\n          key={todo.id}\n        />\n      ))}\n    </section>\n  );\n};\n","import { useState } from 'react';\n\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { TodoWithUser } from './react-app-env';\nimport { TodoList } from './components/TodoList';\n\nconst getUserById = (userId: number) => {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n};\n\nconst todosWithUsers: TodoWithUser[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nexport const App = () => {\n  const [todos, setTodos] = useState<TodoWithUser[]>(todosWithUsers);\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [hasTitleError, setHasTitleError] = useState(false);\n  const [hasUserError, setHasUserError] = useState(false);\n\n  const getLargestTodoId = () => {\n    const todoIds = todos.map(todo => todo.id);\n\n    return Math.max(...todoIds);\n  };\n\n  const resetForm = () => {\n    setNewTodoTitle('');\n    setSelectedUserId(0);\n  };\n\n  const handleFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setHasTitleError(!newTodoTitle);\n    setHasUserError(!selectedUserId);\n\n    const user = getUserById(selectedUserId);\n\n    const newTodo: TodoWithUser = {\n      id: getLargestTodoId() + 1,\n      title: newTodoTitle,\n      userId: selectedUserId,\n      completed: false,\n      user,\n    };\n\n    if (newTodoTitle.trim() && selectedUserId) {\n      setTodos(currentTodos => [...currentTodos, newTodo]);\n      resetForm();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleFormSubmit}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            placeholder=\"Enter a title\"\n            value={newTodoTitle}\n            onChange={event => {\n              setNewTodoTitle(event.target.value);\n            }}\n            data-cy=\"titleInput\"\n          />\n\n          {!newTodoTitle.trim() && hasTitleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <select\n            value={selectedUserId}\n            onChange={event => {\n              setSelectedUserId(+event.target.value);\n            }}\n            data-cy=\"userSelect\"\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n\n            {usersFromServer.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n\n          {!selectedUserId && hasUserError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}